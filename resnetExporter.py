# -*- coding: utf-8 -*-
"""Untitled32.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JUFYRKz25XVL84eRANGNE4yncB8k3q45
"""

# Install required packages
import subprocess
subprocess.check_call(["pip", "install", "onnx", "onnxruntime", "torchvision"])

import torch
import torchvision.models as models
import torchvision.transforms as transforms
from PIL import Image
import onnx
import numpy as np
import onnxruntime as ort
import urllib.request



# Load a pre-trained ResNet18 model
model = models.resnet18(pretrained=True)
model.eval()  # Set to inference mode

# Export the model using a dummy input
dummy_input = torch.randn(1, 3, 224, 224)
torch.onnx.export(
    model,
    dummy_input,
    "resnet18.onnx",
    export_params=True,
    opset_version=11,
    do_constant_folding=True,
    input_names=['input'],
    output_names=['output'],
    dynamic_axes={'input': {0: 'batch_size'}, 'output': {0: 'batch_size'}}
)

# Validate ONNX model
onnx_model = onnx.load("resnet18.onnx")
onnx.checker.check_model(onnx_model)
print("ONNX model is valid.")

transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),  # Converts image to [C, H, W] in [0,1]
    transforms.Normalize(mean=[0.485, 0.456, 0.406],  # ImageNet mean
                         std=[0.229, 0.224, 0.225])   # ImageNet std
])

image = Image.open("/content/carousel.jpg").convert("RGB")
input_tensor = transform(image).unsqueeze(0)  # [1, 3, 224, 224]
input_numpy = input_tensor.cpu().numpy().astype(np.float32)

ort_session = ort.InferenceSession("resnet18.onnx", providers=['CPUExecutionProvider'])
input_name = ort_session.get_inputs()[0].name
ort_outs = ort_session.run(None, {input_name: input_numpy})

output = torch.tensor(ort_outs[0])  # Shape: [1, 1000]
probs = torch.nn.functional.softmax(output, dim=1)
top5_probs, top5_indices = torch.topk(probs, k=5)

url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
labels = urllib.request.urlopen(url).read().decode("utf-8").splitlines()

print("\nTop 5 Predictions:")
for i in range(5):
    idx = top5_indices[0][i].item()
    print(f"{i+1}. {labels[idx]} - {top5_probs[0][i].item():.4f}")

# Get the predicted class (index of highest probability)
predicted_class = top5_indices[0][0].item()  # Get the first (highest probability) prediction

import json
import urllib.request

url = "https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"
labels = urllib.request.urlopen(url).read().decode("utf-8").splitlines()

print("Predicted class label:", labels[predicted_class])

from google.colab import files
files.download("resnet18.onnx")

import onnx

model = onnx.load("resnet18.onnx")
print("IR Version:", model.ir_version)
print("Opset Version:", model.opset_import[0].version)

